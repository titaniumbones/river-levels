* [[https://gionkunz.github.io/chartist-js/examples.html][Chartist]] Charts from River Gauge Data

** Intro
Adaptation of NOAA endpoint to wateroffice data

Some basic thoughts:

- graphing wateroffice data turns out to be easy once it's available: convert unix date-time to javascript Date object & graph. Improvements might include:
- use either `target-line` or maybe better, [[https://github.com/gionkunz/chartist-plugin-threshold][threshold]] plugin to identify periods of navigability.  cf. descriptions and examples on [[https://gionkunz.github.io/chartist-js/plugins.html][plugins page]].
  - threshold CSS and definition is working pretty well as of <2019-11-27 Wed> in the page generated below
- [[https://github.com/tmmdata/chartist-plugin-tooltip][tooltips plugin]] is a little less awesome than other frameworks:
  - no touch support!!
  - tooltips only show up on mouseover of *points*, not of areas.  This will be a real pain in these graphs.
  - not trivial to pass HTML to the tooltip, though it can be overcome by passing a function name [[https://github.com/tmmdata/chartist-plugin-tooltip#available-options-and-their-defaults][to the tooltipFnc options property]] on plugin initialization. The function takes towo parameters: *meta*, the value of the meta property, and *value*, the y-value. This turns out to be pretty inflexible, and probably rules out chartist for our purposes (sad b/c it was so easy to work with).
  - [[https://github.com/tmmdata/chartist-plugin-tooltip/pulls][lotso f outstanding PR's]] and [[https://github.com/tmmdata/chartist-plugin-tooltip/issues][issues]], doesn't appear to be very actively maintained.
- *thresholds/line segments*: If I really want to  use color to represent direction, then instead of threshold I have to use some kind of custom plugin -- I can write it! -- that deserializes meta and takes a value map on the  ~quality~~ property, then uses that to do the smae thing asthreshold (clone element & mask). I can't quite understand the threshold code, so would have to investigate further, but looks possible.  Note that all this work is done in the *on: draw* phase of chart construction, cf. https://gionkunz.github.io/chartist-js/getting-started.html#colour-up-your-charts, dynamic coloring
** CSS
Adding some tab stuff here:

#+begin_src css :tangle chartist-line-wo.css
 /* Style the tab */
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
}

/* Style the buttons that are used to open the tab content */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 500px 1fr;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
} 

#+end_src
#+begin_src css :tangle chartist-line-wo.css
:root {
    --bad-value: #f05b4f;
    --good-value: #59922b;
    --shoulder-value: rgb(40,125,125);
    --too-small: rgb(30,30,30);
    box-sizing: border-box;
}

/* flex layout */
main#main {
    /* margin-top: 300px; */
    display: flex;
    /* max-height: 800px; */
    width:100%;
    grid-column-template: 1fr 1fr 1fr;
    justify-content: space-around;
    flex-direction: row;
    flex-wrap: wrap; 
}

#main > * {
    flex-basis: 100%;
    /* flex-grow: 1; */
    flex-shrink: 1;
    /* max-height: 400px; */
}


/* Use this selector to override the line style on a given series */
.ct-series-a .ct-line {
    /* Set the colour of this series line */
    stroke:blue;
    /* Control the thikness of your lines */
    stroke-width: 1px;
    /* Create a dashed line with a pattern */
    // stroke-dasharray: 4px 8px;
}

/* This selector overrides the points style on line charts. Points on line charts are actually just very short strokes. This allows you to customize even the point size in CSS */
.ct-series-a .ct-point {
    /* Colour of your points */
    stroke:red;
    /* Size of your points */
    stroke-width: 10px;
    /* Make your points appear as squares */
    /* stroke-linecap: square; */
}
.ct-target-line {
    stroke: var(no-surf);
    stroke-width: 2px;
    stroke-dasharray: 4px;
    shape-rendering: crispEdges;
}

/* threshold */
.ct-line.ct-threshold-above, .ct-point.ct-threshold-above, .ct-bar.ct-threshold-above {
    stroke: var(--good-value);
}

.ct-line.ct-threshold-below, .ct-point.ct-threshold-below, .ct-bar.ct-threshold-below {
    stroke: var(--too-small);
}

.ct-area.ct-threshold-above {
    fill: var(--good-value);
}

.ct-area.ct-threshold-below {     
    fill: var(--too-small);
}

/* arrows and tooltips */
.chartist-tooltip div.container {
    padding: 10px;
    opacity:1.0;
    margin: 0;
    border-radius:5px;
    border: 3px solid rgba(125,125,125,0.5);
}
.chartist-tooltip .bad {
    background-color: var(--bad-value);
}
.chartist-tooltip .good {
    background-color: var(--good-value);
}

.chartist-tooltip .shoulder {
    background-color: var(--shoulder-value);
}

.chartist-tooltip {
    background-color: unset;
    padding: 0px;
    font-size: 1.2em;}

/* tooltip bottom caret */
.chartist-tooltip::before {
    border-top-color: rgba(125,125,125,0.4);
}
.arrow {
    transform:rotate(calc(var(--direction)*1deg));
    display:inline-block;
}

.no-surf {
    stroke: var(--no-surf);
    fill: var(--no-surf);
    opacity: 0.2;
    pointer-events: none;
}
/* background */

/* Segments!!!! */
.ct-segment-shoulder .ct-point, .ct-segment-shoulder .ct-line {
    stroke: var(--shoulder-value);
    /* fill: var(--shoulder-value); */
}

.ct-segment-good .ct-point, .ct-segment-good .ct-line {
    stroke: var(--good-value);
    /* fill: var(--good-value); */
}
.ct-segment-bad .ct-point, .ct-segment-bad .ct-line {
    stroke: var(--bad-value);
    /* fill: var(--bad-value); */
}

.ct-segment-bad  .ct-area {
    fill: var(--bad-value);
}


.ct-segment-good  .ct-area {
    fill: var(--good-value);
}
.ct-segment-shoulder  .ct-area {
    fill: var(--shoulder-value);
}

/* captions */
figcaption { text-align: center; }
/* testing */

div.filler {
min-height: 300px;
background-color: (red, green);
}


#+end_src
** JS

#+begin_src javascript :tangle chartist-line-river.js
const linkContainer = document.querySelector('#tablist');
const tabContainer = document.querySelector('#tabContainer')
const md = window.markdownit('commonmark', {
  html: true,
  linkify: true});
/* use footnote, attribute and emoji plugins */
md.use(window.markdownItAttrs);

/**
 ,* Show the relevanttab.  gotta figure out what the proper classes are
 ,* @param {} evt
 ,* @param {} tabName
 ,*/
function openTab(evt, tabName, tabSelectors={content:'tabcontent', links: 'tablinks', context: document}) {
  // Declare all variables
  let tabcontent, tablinks;

  // Get all elements with class="tabcontent" and hide them
  tabcontent = tabSelectors.context.querySelectorAll('.' + tabSelectors.content);
  for (let i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }

  // Get all elements with class="tablinks" and remove the class "active"
  tablinks = tabSelectors.context.querySelectorAll('.' + tabSelectors.links);
  for (let i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }

  // Show the current tab, and add an "active" class to the button that opened the tab
  document.querySelector('#' + tabName).style.display = null ;
  evt.currentTarget.className += " active";
} 

async function buildTab (river) {
  linkContainer.innerHTML += `<a class="tablinks"onclick="openTab(event, '${river.slug}')">${river.slug}</a>`;
  const tabcontents = document.createElement('section');
  tabcontents.id = river.slug;
  tabcontents.classList += 'tabcontent';
  tabcontents.innerHTML = `<figure class="ct-chart ct-perfect-fourth" id="${river.slug}-chart"><figcaption><h2>Waiting</h2></figcaption></figure>`
  tabContainer.appendChild(tabcontents);
  // tabcontents.style.visibility='hidden'
  const description = document.createElement('section');
  tabcontents.appendChild(description);
  fetch (`./wikihtml/${river.slug}.md`)
    .then( (res) => res.text())
    .then( (markdown) => (markdown.length > 0) ? description.innerHTML += md.render(markdown) : description.innerHTML += md.render( '## Unable to fetch river description, sorry\n\nMaybe it hasn\'t been written yet?'))
    .catch (() => (err) => description.innerHTML +=
            `<h2>Unable to fetch river description, sorry</h2>
<p> Maybe it hasn't been written yet? ${err}</p>`)
  // charts.push(buildChart(m[0], m[1]))
  return buildChart(river, '#' + river.slug + '-chart')
    // .then( ()=> tabcontents.style.display='none' )
}

async function buildTabs (rivers) {
  let allPromises = [];
  for (const r of rivers) {
    allPromises += buildTab(r);
  }
  return Promise.all(allPromises).then(() => allPromises);
  // return allPromises
  // Promise.all(allPromises).then( () => openTab({target: document.querySelector('#gorge')}, 'gorge') );
}

function generateTooltip (meta, value) {
  // console.log(meta);
  // console.log('THIS IS THIS', value);
  const p = Chartist.deserialize(meta),
      units = p.units;
  console.log(p, units, value);
  //console.log (p.quality, p.direction,(p.wvd ? "wave" : "wind"), (p.wvd || p.wdir));
  const date = moment(p.data[0]),
      magnitude =  p.data[1].toFixed(2);
  let dateSpan = `<span class="chartist-tooltip-value">${date.format('MM-D HH:mm')}</span>`,
      magSpan = `<span>${magnitude} ${units}; </span>`,
      text = `<span class="chartist-tooltip-value>${date.format('MM-DD - HH:mm')}<br>${magnitude}</span>`,
      output = `<div class="${p.quality} container">${magSpan}<br>${dateSpan}</div>`
  return output
}

async function buildChart (spot, selector='#waves-chart') {
  console.log(spot,selector)
  const processed = await processGauge(spot), // consider using 
        header = document.querySelector(`${selector} figcaption h2`);
  // console.log(spot.units + " THESE ARE UNITS");
  header.innerHTML = `${spot.name} Water Levels (Latest)`

  let chart = new Chartist.SegmentedLine(selector, {
    series: [
      {name: 'Gauge data in CMS',
       data: processed
      }
    ]
  },  {
    scaleMinSpace: 200,
    showArea: true,
    axisX: {
      type: Chartist.FixedScaleAxis,
      divisor: 25,
      labelInterpolationFnc: function(value) {
        return moment(value).format('MM-DD [\n] HH:mm');
      }
    },
    axisY: {scaleMinSpace: 100},
    targetLine: {
      value: spot.minHeight,
      class: 'ct-target-line'
    },
    plugins: [
      Chartist.plugins.tooltip({
        tooltipFnc: generateTooltip, 
        anchorToPoint: true,
        //metaIsHTML: true
      }),
      Chartist.plugins.ctThreshold({threshold:spot.minHeight})
    ]
  });
  return await chart;
}

function buildCharts () {
  const chartMap = [ [elora, '#elora'], [streetsville, '#lower-credit'], [irvine, '#irvine'], [upperCredit, '#upper-credit'] ]
  charts = []
  for (let m of chartMap) {
    if (! document.querySelector(m[1])) {
      const el = document.createElement('figure');
      el.id = m[1].substr(1);
      
      el.setAttribute('class', 'ct-chart ct-perfect-fourth')
      el.innerHTML='<figcaption><h2></h2></figcaption>'
      document.querySelector('#main').appendChild(el);
    }
    charts.push(buildChart(m[0], m[1]))
  }
}

function projectY(chartRect, bounds, value) {
  return chartRect.y1 - (chartRect.height() / bounds.max * value)
}

let charts
buildTabs([elora,streetsville, irvine,upperCredit])
  // .then( (all) => setTimeout(openTab({currentTarget: document.querySelector('#grand')}, 'grand'), 10000))
#+end_src

#+RESULTS:

** HTML
#+begin_src html :tangle chartist-line-wo.html
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8"/>
        <link rel="manifest" href="/manifest.json">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="application-name" content="Southern Ontario River Levels & Guide">
        <meta name="apple-mobile-web-app-title" content="River Levels">
        <meta name="theme-color" content="#FF9800">
        <meta name="msapplication-navbutton-color" content="#FF9800">
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
        <meta name="msapplication-starturl" content="/index.html">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <link rel="icon" sizes="128x128" href="/images/touch/icon-128x128.png">
        <link rel="apple-touch-icon" sizes="128x128" href="/images/touch/icon-128x128.png">
        <link rel="icon" sizes="192x192" href="icon-192x192.png">
        <link rel="apple-touch-icon" sizes="192x192" href="/images/touch/icon-192x192.png">
        <link rel="icon" sizes="256x256" href="/images/touch/icon-256x256.png">
        <link rel="apple-touch-icon" sizes="256x256" href="/images/touch/icon-256x256.png">
        <link rel="icon" sizes="384x384" href="/images/touch/icon-384x384.png">
        <link rel="apple-touch-icon" sizes="384x384" href="/images/touch/icon-384x384.png">
        <link rel="icon" sizes="512x512" href="/images/touch/icon-512x512.png">
        <link rel="apple-touch-icon" sizes="512x512" href="/images/touch/icon-512x512.png">

        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>River Conditions & Descriptions</title>
        <!-- Bootstrap CSS -- needs replacing!! -->
        <!-- <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"> -->

        <!-- CHOTA!!! -->
        <link rel="stylesheet" href="https://unpkg.com/chota">
        <!-- CHARTIST CSS -->
        <link rel="stylesheet" href="vendor/chartist/chartist.min.css">
        <link rel="stylesheet" href="vendor/chartist-plugin-tooltips-updated/chartist-plugin-tooltip.css">
        <link rel="stylesheet" href="vendor/chartist-plugin-threshold/chartist-plugin-threshold.css">
        <link rel="stylesheet" href="chartist-line-wo.css">
        <link rel="stylesheet" href="https://unpkg.com/js-datepicker/dist/datepicker.min.css">
        <style>
        </style>
    </head>
    <body>
        <!-- Brand new, somewhat silly, nav bar -->
        <header>
            <nav class="nav bg-light">
                <div class="nav-center"><a class="brand" href="#">S. O. Rivers</a></div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav mr-auto">
                    </ul>
                </div>
            </nav>
            <nav class="nav">
                <div id="tablist" class="nav-center tabs">

                </div>
            </nav>

        </header>
        <!-- Site content goes here !-->
        <main id="main" class="container">
        
            <section class="alert">
                <div class="disclaimer"></div>
                <div class="attribution">Data </div>
            </section>
            <!-- Tab content -->
            <section id="tabContainer">
            </section>
            <form action="">
                <p class="grouped">
                    <input name="river" type="text" value="River Name"/>
                    <input name="date" type="text" value="2019-11-30"/>
                    <input name="entry" type="text" value="Journal Entry"/>
                    <button class="button primary">Submit</button>
                </p>
            </form>
            

        </main>
        <script src="vendor/gauge-parsers/gaugeParser.js"></script>
        <script src="vendor/markdown-it/markdown-it.min.js"></script>
        <script src="vendor/markdown-it-attrs/markdown-it-attrs.browser.js"></script>

        <script src="vendor/chartist/chartist.js"></script>
        <script src="vendor/chartist-segmented-line/segmented-line.js"></script>

        <script src="vendor/chartist-plugin-tooltips-updated/chartist-plugin-tooltip.js"></script>
        <script src="vendor/chartist-plugin-threshold/chartist-plugin-threshold.js"></script>

        <script src="vendor/moment/moment-with-locales.min.js"></script>
        <script src="chartist-line-river.js"></script>
        <script src="https://unpkg.com/js-datepicker/dist/datepicker.min.js"></script>
        <script>
         if ('serviceWorker' in navigator) {
             window.addEventListener('load', () => {
                 /* navigator.serviceWorker.register('serviceworker.js')
                  ,*          .then(registration => {
                  ,*              console.log('Service Worker is registered', registration);
                  ,*          })
                  ,*          .catch(err => {
                  ,*              console.error('Registration failed:', err);
                  ,*          });
,*/
                 navigator.serviceWorker.getRegistrations().then(
                     function(registrations) {
                         for(let registration of registrations) {  
                             registration.unregister();
                         }
                 });
             }); 
         }
        </script>
         
    </body>
</html>
#+end_src

** Service Worker 

Working on this with help from https://blog.bitsrc.io/understanding-service-workers-and-caching-strategies-a6c1e1cbde03 , [[https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers][MDN]] , firefox 

#+begin_src js :tangle serviceworker.js
const cacheName = 'v1';
const precacheResources = [
  '/',
  'chartist-line-wo.html',
  'vendor/chartist/chartist.min.css'
];

self.addEventListener('install', event => {
  console.log('Service worker install event!');
  event.waitUntil(
    caches.open(cacheName)
      .then(cache => {
        return cache.addAll(precacheResources);
      })
  );
});

self.addEventListener('activate', event => {
  console.log('Service worker activate event!');
});

self.addEventListener('fetch', event => {
  console.log('Fetch intercepted for:', event.request.url);
  event.respondWith(caches.match(event.request)
                    .then(cachedResponse => {
                      if (cachedResponse) {
                        return cachedResponse;
                      }
                      return fetch(event.request).then((fetched) => {
                        return caches.open(cacheName).then( (cache) => {
                          cache.put(event.request,fetched.clone());
                          return fetched
                        }); 
                      });
                    })
                   );
});

// self.addEventListener('fetch', (event) => {
//   console.log('Fetch intercepted for: ' , event.request.url)
//   event.respondWith(
//     caches.match(event.request).then((resp) => {
//       // if it's a local resource, or some css or js, then give the cache priority
//       if (requestURL.origin == location.origin ) {
//         // Handle article URLs
//         return resp || fetch(event.request).then((response) => {
//           return caches.open(cacheName).then((cache) => {
//             cache.put(event.request, response.clone());
//             return response;
//           });  
//         });
       
//       }
//       // if it's anything else -- that is, live data -- then
//       // handle differently. RIght now, we ware *not* actually reading from the cache (!)
//       // instead, we always try to get from the 
//       event.respondWith(
//         caches.open(cacheName).then(function(cache) {
//           return fetch(event.request).then(function(response) {
//             cache.put(event.request, response.clone());
//             return response;
//           });
//         })
//       );


//     })
//   );
// });

// const precacheResources = [
//   '/',
//   'index.html',
//   'chartist-line-wo.html',
//   'styles/main.css',
//   'vendor/chartist/chartist.min.css',
//   'vendor/chartist-plugin-tooltips-updated/chartist-plugin-tooltip.css'
//   // 'vendor/chartist-plugin-threshold/chartist-plugin-threshold.css',
//   // 'vendor/chartist-plugin-tooltips-updated/chartist-plugin-tooltip.css',
//   // 'chartist-line-wo.css',
//   // 'vendor/gauge-parsers/gaugeParser.js',
//   // 'vendor/markdown-it/markdown-it.min.js',
//   // 'vendor/markdown-it-attrs/markdown-it-attrs.browser.js',
//   // 'vendor/chartist/chartist.js',
//   // 'vendor/chartist-segmented-line/segmented-line.js',
//   // 'vendor/chartist-plugin-tooltips-updated/chartist-plugin-tooltip.js',
//   // 'vendor/moment/moment-with-locales.min.js',
//   // 'chartist-line-river.js'
// ];


// self.addEventListener('fetch', event => {
//   console.log('Fetch intercepted for:', event.request.url);
//   event.respondWith(caches.match(event.request)
//                     .then(cachedResponse => {
//                       if (cachedResponse) {
//                         return cachedResponse;
//                       }
//                       return fetch(event.request);
//                     })
//                    );
// });
#+end_src

